<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app>
    <display-name>Archetype Created Web Application</display-name>

    <!-- 注册并在服务启动的时候启动spring容器，否则只有springmvc容器，mvc容器默认在接收请求后才会初始化各种 bean，
        将导致 AuthTokenFetcher 等 Bean 将不会立即初始化，定时任务就不会立即执行。可以从 afterPropertiesSet 打印时机看出来 -->
    <!-- 为什么要做父子容器呢？ 由于管理Controller层的子AC可以委托双亲 ApplicationContext去查找bean，
        所以Root ApplicationContext容器中的Bean是共享的，而子AC中的Bean却不能被管理下层Service层和DAO层的Root Application获取，从而达到上层依赖下层的纯粹性。-->
    <!-- https://www.cnblogs.com/hafiz/p/5875740.html-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:spring.xml</param-value>
    </context-param>

    <servlet>
        <servlet-name>app-servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 这里负责启动 spring-mvc 容器，是 spring 的子容器。Tomcat启动时，spring-mvc 并没有加载，而是第一次请求到来时才进行加载，这样会使 AuthTokenFetcher 不会立即启动。可以通过配置 load-on-startup 使之提前-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- classpath 读本jar包下的内容，classpath* 读所有 jar 包下的内容，但只用第一个 -->
            <param-value>classpath*:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>app-servlet</servlet-name>
        <!--
            "/" 表示匹配所有未被其它 servlet-mapping 匹配的请求，（ .jsp和.jspx 被tomcat jar包中 servet *.jsp *.jspx 匹配了，所以也不会被 / 所匹配）
            "/*" 表示匹配所有请求（包含所有后缀), *.jsp比"/*"的匹配度低，所以配置后会使.jsp也进入DispatcherServlet, 但 return jsp 页面时会再被匹配进来导致报错，所以这个/*的配置不适用于DispatcherServlet,一般用于过滤器来拦截所有资源
            *.do表示匹配所有以.do结尾的请求
            关于url-pattern 的一些文章
            https://blog.csdn.net/u014630371/article/details/78996278
            https://www.iteye.com/blog/hualong-1736807
            https://blog.csdn.net/lppl010_/article/details/80797780
            https://www.cnblogs.com/coder-lichao/p/10698996.html -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 不知为何对 controller 中的请求无效，/ 和 /* 都不行，所以暂时用 spring-mvc.xml 中的配置处理了 -->
    <!-- https://blog.csdn.net/qq_42928918/article/details/88400435 -->
    <filter>
        <filter-name>encoding-filter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 以下几个 init-param 对应 Filter 的属性/构造方法 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding-filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


</web-app>
